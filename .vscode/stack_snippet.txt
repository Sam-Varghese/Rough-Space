CSS doesn't have a method to calculate and adjust one element according to another, which would be needed here.

What one can do though, is to use `transform`, where one _cover_ the text with a pseudo and then move the text element to the left and the pseudo to the right, revealing the text.

The downside, not being able to calculate width's, is that with wider content it will go faster and narrower slower, and the only reasonable way to solve that is to either calculate the text length server side and set the steps/duration using inline style, or client side using a script.

_Note, in below sample I removed the "blinking" effect to simplify the code._

Stack snippet

<!-- begin snippet: js hide: true console: false babel: false -->

<!-- language: lang-css -->

    @import url(https://fonts.googleapis.com/css?family=Anonymous+Pro);
    body {
      background-color: #1a1a1a;
      color: rgba(255, 255, 255, 0.75);
      font-size: 16px;
      text-align: center;
      font-family: 'Anonymous Pro', monospace;
    }

    .typewriter-wrapper {
      overflow: hidden;
      display: inline-block;
    }

    .typewriter-text {
      display: none;
      position: relative;
      margin: 2rem auto;
      white-space: nowrap;
      overflow: hidden;
      display: inline-block;
      transform: translateX(50%);
      padding: 0 2px;
    }

    .typewriter-text::after {
      content: '';
      position: absolute;
      left: 2px;
      top: 0;
      right: 0;
      bottom: 0;
      background: #1a1a1a;
      border-left: 1px solid white;
    }

    .line-1 {
      animation: type 2s 0.5s steps(30, end) forwards;
    }

    .line-1::after {
      animation: type2 2s 0.5s steps(30, end) forwards;
    }

    @keyframes type {
      0% {
        transform: translateX(50%);
      }
      100% {
        transform: translateX(0);
      }
    }

    @keyframes type2 {
      0% {
        transform: translateX(0);
      }
      100% {
        transform: translateX(calc(100% - 1px));
      }
    }

<!-- language: lang-html -->

    <div class="typewriter-wrapper">
      <h1 class="typewriter-text line-1">Lorem Ipsum Dolor</h1>
    </div>
    <hr>
    <div class="typewriter-wrapper">
      <p class="typewriter-text line-1">Lorem ipsum dolor Lorem ipsum dolor Lorem ipsum dolor</p>
    </div>

<!-- end snippet -->

---

Updated.

I also [found a solution at CSS Tricks][1] using width, cleverly combined with Flexbox, though the _typing faster/slower for short/long text_ issue applies here too.

Stack snippet

<!-- begin snippet: js hide: false console: false babel: false -->

<!-- language: lang-css -->

    @import url(https://fonts.googleapis.com/css?family=Anonymous+Pro);
    body {
      background-color: #1a1a1a;
      color: rgba(255, 255, 255, 0.75);
      font-size: 16px;
      text-align: center;
      font-family: 'Anonymous Pro', monospace;
    }

    .typewriter-wrapper {
      display: flex;
      justify-content: center;
    }

    .typewriter-text {
      position: relative;
      margin: 2rem auto;
      white-space: nowrap;
      overflow: hidden;
      width: 0;
      border-right: 1px solid white;
    }

    .line-1 {
      animation: type 3s 0.5s steps(30, end) forwards,
      blink .5s step-end infinite;
    }

    @keyframes type {
      0% {
        width: 0;
      }
      100% {
        width: 100%;
      }
    }

    @keyframes blink {
      0%,
      100% {
        border-color: transparent
      }
      50% {
        border-color: white
      }
    }

<!-- language: lang-html -->

    <div class="typewriter-wrapper">
      <div>
        <h1 class="typewriter-text line-1">Lorem Ipsum Dolor</h1>
      </div>
    </div>
    <hr>
    <div class="typewriter-wrapper">
      <div>
        <p class="typewriter-text line-1">Lorem ipsum dolor Lorem ipsum dolor Lorem ipsum dolor</p>
      </div>
    </div>

<!-- end snippet -->


  [1]: https://css-tricks.com/snippets/css/typewriter-effect/